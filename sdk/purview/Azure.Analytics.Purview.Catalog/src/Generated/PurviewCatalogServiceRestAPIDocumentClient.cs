// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewCatalogServiceRestAPIDocument service client. </summary>
    public partial class PurviewCatalogServiceRestAPIDocumentClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PurviewCatalogServiceRestAPIDocumentRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PurviewCatalogServiceRestAPIDocumentClient for mocking. </summary>
        protected PurviewCatalogServiceRestAPIDocumentClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewCatalogServiceRestAPIDocumentClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewCatalogServiceRestAPIDocumentClient(Uri endpoint, TokenCredential credential, PurviewCatalogServiceRestAPIDocumentClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewCatalogServiceRestAPIDocumentClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://purview.azure.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new PurviewCatalogServiceRestAPIDocumentRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Initializes a new instance of PurviewCatalogServiceRestAPIDocumentClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        internal PurviewCatalogServiceRestAPIDocumentClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2022-03-01-preview")
        {
            RestClient = new PurviewCatalogServiceRestAPIDocumentRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets data using search. </summary>
        /// <param name="searchRequest"> An object specifying the search criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SearchResult>> SearchAsync(SearchRequest searchRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.Search");
            scope.Start();
            try
            {
                return await RestClient.SearchAsync(searchRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets data using search. </summary>
        /// <param name="searchRequest"> An object specifying the search criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SearchResult> Search(SearchRequest searchRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.Search");
            scope.Start();
            try
            {
                return RestClient.Search(searchRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search suggestions by query criteria. </summary>
        /// <param name="suggestRequest"> An object specifying the suggest criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SuggestResult>> SuggestAsync(SuggestRequest suggestRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.Suggest");
            scope.Start();
            try
            {
                return await RestClient.SuggestAsync(suggestRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search suggestions by query criteria. </summary>
        /// <param name="suggestRequest"> An object specifying the suggest criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SuggestResult> Suggest(SuggestRequest suggestRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.Suggest");
            scope.Start();
            try
            {
                return RestClient.Suggest(suggestRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Browse entities by path or entity type. </summary>
        /// <param name="browseRequest"> An object specifying the browse criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BrowseResult>> BrowseAsync(BrowseRequest browseRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.Browse");
            scope.Start();
            try
            {
                return await RestClient.BrowseAsync(browseRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Browse entities by path or entity type. </summary>
        /// <param name="browseRequest"> An object specifying the browse criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BrowseResult> Browse(BrowseRequest browseRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.Browse");
            scope.Start();
            try
            {
                return RestClient.Browse(browseRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get auto complete options. </summary>
        /// <param name="autoCompleteRequest"> An object specifying the autocomplete criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AutoCompleteResult>> AutoCompleteAsync(AutoCompleteRequest autoCompleteRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.AutoComplete");
            scope.Start();
            try
            {
                return await RestClient.AutoCompleteAsync(autoCompleteRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get auto complete options. </summary>
        /// <param name="autoCompleteRequest"> An object specifying the autocomplete criteria. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AutoCompleteResult> AutoComplete(AutoCompleteRequest autoCompleteRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogServiceRestAPIDocumentClient.AutoComplete");
            scope.Start();
            try
            {
                return RestClient.AutoComplete(autoCompleteRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
