// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(SearchResultValueConverter))]
    public partial class SearchResultValue : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SearchScore))
            {
                writer.WritePropertyName("@search.score");
                writer.WriteNumberValue(SearchScore.Value);
            }
            if (Optional.IsDefined(SearchHighlights))
            {
                writer.WritePropertyName("@search.highlights");
                writer.WriteObjectValue(SearchHighlights);
            }
            if (Optional.IsDefined(SearchText))
            {
                writer.WritePropertyName("@search.text");
                writer.WriteStringValue(SearchText);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Owner))
            {
                writer.WritePropertyName("owner");
                writer.WriteStringValue(Owner);
            }
            if (Optional.IsDefined(QualifiedName))
            {
                writer.WritePropertyName("qualifiedName");
                writer.WriteStringValue(QualifiedName);
            }
            if (Optional.IsDefined(EntityType))
            {
                writer.WritePropertyName("entityType");
                writer.WriteStringValue(EntityType);
            }
            if (Optional.IsCollectionDefined(Classification))
            {
                writer.WritePropertyName("classification");
                writer.WriteStartArray();
                foreach (var item in Classification)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Label))
            {
                writer.WritePropertyName("label");
                writer.WriteStartArray();
                foreach (var item in Label)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Term))
            {
                writer.WritePropertyName("term");
                writer.WriteStartArray();
                foreach (var item in Term)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Contact))
            {
                writer.WritePropertyName("contact");
                writer.WriteStartArray();
                foreach (var item in Contact)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AssetType))
            {
                writer.WritePropertyName("assetType");
                writer.WriteStartArray();
                foreach (var item in AssetType)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static SearchResultValue DeserializeSearchResultValue(JsonElement element)
        {
            Optional<float> searchScore = default;
            Optional<SearchHighlights> searchHighlights = default;
            Optional<string> searchText = default;
            Optional<string> description = default;
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> owner = default;
            Optional<string> qualifiedName = default;
            Optional<string> entityType = default;
            Optional<IList<string>> classification = default;
            Optional<IList<string>> label = default;
            Optional<IList<TermSearchResultValue>> term = default;
            Optional<IList<ContactSearchResultValue>> contact = default;
            Optional<IList<string>> assetType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("@search.score"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    searchScore = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("@search.highlights"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    searchHighlights = SearchHighlights.DeserializeSearchHighlights(property.Value);
                    continue;
                }
                if (property.NameEquals("@search.text"))
                {
                    searchText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("owner"))
                {
                    owner = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("qualifiedName"))
                {
                    qualifiedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entityType"))
                {
                    entityType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("classification"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    classification = array;
                    continue;
                }
                if (property.NameEquals("label"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    label = array;
                    continue;
                }
                if (property.NameEquals("term"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TermSearchResultValue> array = new List<TermSearchResultValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TermSearchResultValue.DeserializeTermSearchResultValue(item));
                    }
                    term = array;
                    continue;
                }
                if (property.NameEquals("contact"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ContactSearchResultValue> array = new List<ContactSearchResultValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContactSearchResultValue.DeserializeContactSearchResultValue(item));
                    }
                    contact = array;
                    continue;
                }
                if (property.NameEquals("assetType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    assetType = array;
                    continue;
                }
            }
            return new SearchResultValue(Optional.ToNullable(searchScore), searchHighlights.Value, searchText.Value, description.Value, id.Value, name.Value, owner.Value, qualifiedName.Value, entityType.Value, Optional.ToList(classification), Optional.ToList(label), Optional.ToList(term), Optional.ToList(contact), Optional.ToList(assetType));
        }

        internal partial class SearchResultValueConverter : JsonConverter<SearchResultValue>
        {
            public override void Write(Utf8JsonWriter writer, SearchResultValue model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override SearchResultValue Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeSearchResultValue(document.RootElement);
            }
        }
    }
}
