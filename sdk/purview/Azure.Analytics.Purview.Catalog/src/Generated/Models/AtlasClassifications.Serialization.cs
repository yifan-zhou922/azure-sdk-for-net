// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(AtlasClassificationsConverter))]
    public partial class AtlasClassifications : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(List))
            {
                writer.WritePropertyName("list");
                writer.WriteStartArray();
                foreach (var item in List)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PageSize))
            {
                writer.WritePropertyName("pageSize");
                writer.WriteNumberValue(PageSize.Value);
            }
            if (Optional.IsDefined(SortBy))
            {
                writer.WritePropertyName("sortBy");
                writer.WriteStringValue(SortBy);
            }
            if (Optional.IsDefined(SortType))
            {
                writer.WritePropertyName("sortType");
                writer.WriteStringValue(SortType.Value.ToString());
            }
            if (Optional.IsDefined(StartIndex))
            {
                writer.WritePropertyName("startIndex");
                writer.WriteNumberValue(StartIndex.Value);
            }
            if (Optional.IsDefined(TotalCount))
            {
                writer.WritePropertyName("totalCount");
                writer.WriteNumberValue(TotalCount.Value);
            }
            writer.WriteEndObject();
        }

        internal static AtlasClassifications DeserializeAtlasClassifications(JsonElement element)
        {
            Optional<IList<object>> list = default;
            Optional<int> pageSize = default;
            Optional<string> sortBy = default;
            Optional<SortType> sortType = default;
            Optional<long> startIndex = default;
            Optional<long> totalCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("list"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    list = array;
                    continue;
                }
                if (property.NameEquals("pageSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pageSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sortBy"))
                {
                    sortBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sortType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sortType = new SortType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startIndex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startIndex = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalCount = property.Value.GetInt64();
                    continue;
                }
            }
            return new AtlasClassifications(Optional.ToList(list), Optional.ToNullable(pageSize), sortBy.Value, Optional.ToNullable(sortType), Optional.ToNullable(startIndex), Optional.ToNullable(totalCount));
        }

        internal partial class AtlasClassificationsConverter : JsonConverter<AtlasClassifications>
        {
            public override void Write(Utf8JsonWriter writer, AtlasClassifications model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override AtlasClassifications Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeAtlasClassifications(document.RootElement);
            }
        }
    }
}
