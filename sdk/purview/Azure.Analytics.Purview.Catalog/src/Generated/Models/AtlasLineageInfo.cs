// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    /// <summary> The lineage information. </summary>
    public partial class AtlasLineageInfo
    {
        /// <summary> Initializes a new instance of AtlasLineageInfo. </summary>
        public AtlasLineageInfo()
        {
            GuidEntityMap = new ChangeTrackingDictionary<string, AtlasEntityHeader>();
            WidthCounts = new ChangeTrackingDictionary<string, IDictionary<string, object>>();
            ParentRelations = new ChangeTrackingList<ParentRelation>();
            Relations = new ChangeTrackingList<LineageRelation>();
        }

        /// <summary> Initializes a new instance of AtlasLineageInfo. </summary>
        /// <param name="baseEntityGuid"> The GUID of the base entity. </param>
        /// <param name="guidEntityMap"> The GUID entity map. </param>
        /// <param name="widthCounts"> The entity count in specific direction. </param>
        /// <param name="lineageDepth"> The depth of lineage. </param>
        /// <param name="lineageWidth"> The width of lineage. </param>
        /// <param name="includeParent"> True to return the parent of the base entity. </param>
        /// <param name="childrenCount"> The number of children node. </param>
        /// <param name="lineageDirection"> The enum of lineage direction. </param>
        /// <param name="parentRelations"> An array of parentRelations relations. </param>
        /// <param name="relations"> An array of lineage relations. </param>
        internal AtlasLineageInfo(string baseEntityGuid, IDictionary<string, AtlasEntityHeader> guidEntityMap, IDictionary<string, IDictionary<string, object>> widthCounts, int? lineageDepth, int? lineageWidth, bool? includeParent, int? childrenCount, LineageDirection? lineageDirection, IList<ParentRelation> parentRelations, IList<LineageRelation> relations)
        {
            BaseEntityGuid = baseEntityGuid;
            GuidEntityMap = guidEntityMap;
            WidthCounts = widthCounts;
            LineageDepth = lineageDepth;
            LineageWidth = lineageWidth;
            IncludeParent = includeParent;
            ChildrenCount = childrenCount;
            LineageDirection = lineageDirection;
            ParentRelations = parentRelations;
            Relations = relations;
        }

        /// <summary> The GUID of the base entity. </summary>
        public string BaseEntityGuid { get; set; }
        /// <summary> The GUID entity map. </summary>
        public IDictionary<string, AtlasEntityHeader> GuidEntityMap { get; }
        /// <summary> The entity count in specific direction. </summary>
        public IDictionary<string, IDictionary<string, object>> WidthCounts { get; }
        /// <summary> The depth of lineage. </summary>
        public int? LineageDepth { get; set; }
        /// <summary> The width of lineage. </summary>
        public int? LineageWidth { get; set; }
        /// <summary> True to return the parent of the base entity. </summary>
        public bool? IncludeParent { get; set; }
        /// <summary> The number of children node. </summary>
        public int? ChildrenCount { get; set; }
        /// <summary> The enum of lineage direction. </summary>
        public LineageDirection? LineageDirection { get; set; }
        /// <summary> An array of parentRelations relations. </summary>
        public IList<ParentRelation> ParentRelations { get; }
        /// <summary> An array of lineage relations. </summary>
        public IList<LineageRelation> Relations { get; }
    }
}
