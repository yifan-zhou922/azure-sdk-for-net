// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(ImportInfoConverter))]
    public partial class ImportInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ChildObjectName))
            {
                writer.WritePropertyName("childObjectName");
                writer.WriteStringValue(ChildObjectName);
            }
            if (Optional.IsDefined(ImportStatus))
            {
                writer.WritePropertyName("importStatus");
                writer.WriteStringValue(ImportStatus.Value.ToString());
            }
            if (Optional.IsDefined(ParentObjectName))
            {
                writer.WritePropertyName("parentObjectName");
                writer.WriteStringValue(ParentObjectName);
            }
            if (Optional.IsDefined(Remarks))
            {
                writer.WritePropertyName("remarks");
                writer.WriteStringValue(Remarks);
            }
            writer.WriteEndObject();
        }

        internal static ImportInfo DeserializeImportInfo(JsonElement element)
        {
            Optional<string> childObjectName = default;
            Optional<ImportStatus> importStatus = default;
            Optional<string> parentObjectName = default;
            Optional<string> remarks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("childObjectName"))
                {
                    childObjectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("importStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    importStatus = new ImportStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("parentObjectName"))
                {
                    parentObjectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remarks"))
                {
                    remarks = property.Value.GetString();
                    continue;
                }
            }
            return new ImportInfo(childObjectName.Value, Optional.ToNullable(importStatus), parentObjectName.Value, remarks.Value);
        }

        internal partial class ImportInfoConverter : JsonConverter<ImportInfo>
        {
            public override void Write(Utf8JsonWriter writer, ImportInfo model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override ImportInfo Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeImportInfo(document.RootElement);
            }
        }
    }
}
