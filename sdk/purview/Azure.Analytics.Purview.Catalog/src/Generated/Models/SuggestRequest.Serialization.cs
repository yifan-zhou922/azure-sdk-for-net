// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(SuggestRequestConverter))]
    public partial class SuggestRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Keywords))
            {
                writer.WritePropertyName("keywords");
                writer.WriteStringValue(Keywords);
            }
            if (Optional.IsDefined(Limit))
            {
                writer.WritePropertyName("limit");
                writer.WriteNumberValue(Limit.Value);
            }
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter");
                writer.WriteObjectValue(Filter);
            }
            writer.WriteEndObject();
        }

        internal static SuggestRequest DeserializeSuggestRequest(JsonElement element)
        {
            Optional<string> keywords = default;
            Optional<int> limit = default;
            Optional<object> filter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keywords"))
                {
                    keywords = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("limit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    limit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("filter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    filter = property.Value.GetObject();
                    continue;
                }
            }
            return new SuggestRequest(keywords.Value, Optional.ToNullable(limit), filter.Value);
        }

        internal partial class SuggestRequestConverter : JsonConverter<SuggestRequest>
        {
            public override void Write(Utf8JsonWriter writer, SuggestRequest model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override SuggestRequest Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeSuggestRequest(document.RootElement);
            }
        }
    }
}
