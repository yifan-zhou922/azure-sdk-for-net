// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(SearchHighlightsConverter))]
    public partial class SearchHighlights : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStartArray();
                foreach (var item in Id)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(QualifiedName))
            {
                writer.WritePropertyName("qualifiedName");
                writer.WriteStartArray();
                foreach (var item in QualifiedName)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStartArray();
                foreach (var item in Name)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStartArray();
                foreach (var item in Description)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EntityType))
            {
                writer.WritePropertyName("entityType");
                writer.WriteStartArray();
                foreach (var item in EntityType)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static SearchHighlights DeserializeSearchHighlights(JsonElement element)
        {
            Optional<IList<string>> id = default;
            Optional<IList<string>> qualifiedName = default;
            Optional<IList<string>> name = default;
            Optional<IList<string>> description = default;
            Optional<IList<string>> entityType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    id = array;
                    continue;
                }
                if (property.NameEquals("qualifiedName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    qualifiedName = array;
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    name = array;
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    description = array;
                    continue;
                }
                if (property.NameEquals("entityType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    entityType = array;
                    continue;
                }
            }
            return new SearchHighlights(Optional.ToList(id), Optional.ToList(qualifiedName), Optional.ToList(name), Optional.ToList(description), Optional.ToList(entityType));
        }

        internal partial class SearchHighlightsConverter : JsonConverter<SearchHighlights>
        {
            public override void Write(Utf8JsonWriter writer, SearchHighlights model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override SearchHighlights Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeSearchHighlights(document.RootElement);
            }
        }
    }
}
