// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(AtlasRelationshipWithExtInfoConverter))]
    public partial class AtlasRelationshipWithExtInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ReferredEntities))
            {
                writer.WritePropertyName("referredEntities");
                writer.WriteStartObject();
                foreach (var item in ReferredEntities)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Relationship))
            {
                writer.WritePropertyName("relationship");
                writer.WriteObjectValue(Relationship);
            }
            writer.WriteEndObject();
        }

        internal static AtlasRelationshipWithExtInfo DeserializeAtlasRelationshipWithExtInfo(JsonElement element)
        {
            Optional<IDictionary<string, AtlasEntityHeader>> referredEntities = default;
            Optional<AtlasRelationship> relationship = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("referredEntities"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, AtlasEntityHeader> dictionary = new Dictionary<string, AtlasEntityHeader>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AtlasEntityHeader.DeserializeAtlasEntityHeader(property0.Value));
                    }
                    referredEntities = dictionary;
                    continue;
                }
                if (property.NameEquals("relationship"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    relationship = AtlasRelationship.DeserializeAtlasRelationship(property.Value);
                    continue;
                }
            }
            return new AtlasRelationshipWithExtInfo(Optional.ToDictionary(referredEntities), relationship.Value);
        }

        internal partial class AtlasRelationshipWithExtInfoConverter : JsonConverter<AtlasRelationshipWithExtInfo>
        {
            public override void Write(Utf8JsonWriter writer, AtlasRelationshipWithExtInfo model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override AtlasRelationshipWithExtInfo Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeAtlasRelationshipWithExtInfo(document.RootElement);
            }
        }
    }
}
