// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(ParentRelationConverter))]
    public partial class ParentRelation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ChildEntityId))
            {
                writer.WritePropertyName("childEntityId");
                writer.WriteStringValue(ChildEntityId);
            }
            if (Optional.IsDefined(RelationshipId))
            {
                writer.WritePropertyName("relationshipId");
                writer.WriteStringValue(RelationshipId);
            }
            if (Optional.IsDefined(ParentEntityId))
            {
                writer.WritePropertyName("parentEntityId");
                writer.WriteStringValue(ParentEntityId);
            }
            writer.WriteEndObject();
        }

        internal static ParentRelation DeserializeParentRelation(JsonElement element)
        {
            Optional<string> childEntityId = default;
            Optional<string> relationshipId = default;
            Optional<string> parentEntityId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("childEntityId"))
                {
                    childEntityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relationshipId"))
                {
                    relationshipId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parentEntityId"))
                {
                    parentEntityId = property.Value.GetString();
                    continue;
                }
            }
            return new ParentRelation(childEntityId.Value, relationshipId.Value, parentEntityId.Value);
        }

        internal partial class ParentRelationConverter : JsonConverter<ParentRelation>
        {
            public override void Write(Utf8JsonWriter writer, ParentRelation model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override ParentRelation Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeParentRelation(document.RootElement);
            }
        }
    }
}
