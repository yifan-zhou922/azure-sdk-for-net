// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(BrowseRequestConverter))]
    public partial class BrowseRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EntityType))
            {
                writer.WritePropertyName("entityType");
                writer.WriteStringValue(EntityType);
            }
            if (Optional.IsDefined(Path))
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (Optional.IsDefined(Limit))
            {
                writer.WritePropertyName("limit");
                writer.WriteNumberValue(Limit.Value);
            }
            if (Optional.IsDefined(Offset))
            {
                writer.WritePropertyName("offset");
                writer.WriteNumberValue(Offset.Value);
            }
            writer.WriteEndObject();
        }

        internal static BrowseRequest DeserializeBrowseRequest(JsonElement element)
        {
            Optional<string> entityType = default;
            Optional<string> path = default;
            Optional<int> limit = default;
            Optional<int> offset = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entityType"))
                {
                    entityType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("limit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    limit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("offset"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    offset = property.Value.GetInt32();
                    continue;
                }
            }
            return new BrowseRequest(entityType.Value, path.Value, Optional.ToNullable(limit), Optional.ToNullable(offset));
        }

        internal partial class BrowseRequestConverter : JsonConverter<BrowseRequest>
        {
            public override void Write(Utf8JsonWriter writer, BrowseRequest model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override BrowseRequest Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeBrowseRequest(document.RootElement);
            }
        }
    }
}
