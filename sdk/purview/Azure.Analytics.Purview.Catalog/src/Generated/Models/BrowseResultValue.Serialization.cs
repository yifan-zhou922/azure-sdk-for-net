// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(BrowseResultValueConverter))]
    public partial class BrowseResultValue : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EntityType))
            {
                writer.WritePropertyName("entityType");
                writer.WriteStringValue(EntityType);
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(IsLeaf))
            {
                writer.WritePropertyName("isLeaf");
                writer.WriteBooleanValue(IsLeaf.Value);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsCollectionDefined(Owner))
            {
                writer.WritePropertyName("owner");
                writer.WriteStartArray();
                foreach (var item in Owner)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Path))
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (Optional.IsDefined(QualifiedName))
            {
                writer.WritePropertyName("qualifiedName");
                writer.WriteStringValue(QualifiedName);
            }
            writer.WriteEndObject();
        }

        internal static BrowseResultValue DeserializeBrowseResultValue(JsonElement element)
        {
            Optional<string> entityType = default;
            Optional<string> id = default;
            Optional<bool> isLeaf = default;
            Optional<string> name = default;
            Optional<IList<BrowseResultOwner>> owner = default;
            Optional<string> path = default;
            Optional<string> qualifiedName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entityType"))
                {
                    entityType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isLeaf"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isLeaf = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("owner"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<BrowseResultOwner> array = new List<BrowseResultOwner>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BrowseResultOwner.DeserializeBrowseResultOwner(item));
                    }
                    owner = array;
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("qualifiedName"))
                {
                    qualifiedName = property.Value.GetString();
                    continue;
                }
            }
            return new BrowseResultValue(entityType.Value, id.Value, Optional.ToNullable(isLeaf), name.Value, Optional.ToList(owner), path.Value, qualifiedName.Value);
        }

        internal partial class BrowseResultValueConverter : JsonConverter<BrowseResultValue>
        {
            public override void Write(Utf8JsonWriter writer, BrowseResultValue model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override BrowseResultValue Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeBrowseResultValue(document.RootElement);
            }
        }
    }
}
