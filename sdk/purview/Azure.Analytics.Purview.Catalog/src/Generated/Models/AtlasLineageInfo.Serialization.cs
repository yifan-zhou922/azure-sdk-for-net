// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    [JsonConverter(typeof(AtlasLineageInfoConverter))]
    public partial class AtlasLineageInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BaseEntityGuid))
            {
                writer.WritePropertyName("baseEntityGuid");
                writer.WriteStringValue(BaseEntityGuid);
            }
            if (Optional.IsCollectionDefined(GuidEntityMap))
            {
                writer.WritePropertyName("guidEntityMap");
                writer.WriteStartObject();
                foreach (var item in GuidEntityMap)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(WidthCounts))
            {
                writer.WritePropertyName("widthCounts");
                writer.WriteStartObject();
                foreach (var item in WidthCounts)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStartObject();
                    foreach (var item0 in item.Value)
                    {
                        writer.WritePropertyName(item0.Key);
                        writer.WriteObjectValue(item0.Value);
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(LineageDepth))
            {
                writer.WritePropertyName("lineageDepth");
                writer.WriteNumberValue(LineageDepth.Value);
            }
            if (Optional.IsDefined(LineageWidth))
            {
                writer.WritePropertyName("lineageWidth");
                writer.WriteNumberValue(LineageWidth.Value);
            }
            if (Optional.IsDefined(IncludeParent))
            {
                writer.WritePropertyName("includeParent");
                writer.WriteBooleanValue(IncludeParent.Value);
            }
            if (Optional.IsDefined(ChildrenCount))
            {
                writer.WritePropertyName("childrenCount");
                writer.WriteNumberValue(ChildrenCount.Value);
            }
            if (Optional.IsDefined(LineageDirection))
            {
                writer.WritePropertyName("lineageDirection");
                writer.WriteStringValue(LineageDirection.Value.ToString());
            }
            if (Optional.IsCollectionDefined(ParentRelations))
            {
                writer.WritePropertyName("parentRelations");
                writer.WriteStartArray();
                foreach (var item in ParentRelations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Relations))
            {
                writer.WritePropertyName("relations");
                writer.WriteStartArray();
                foreach (var item in Relations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AtlasLineageInfo DeserializeAtlasLineageInfo(JsonElement element)
        {
            Optional<string> baseEntityGuid = default;
            Optional<IDictionary<string, AtlasEntityHeader>> guidEntityMap = default;
            Optional<IDictionary<string, IDictionary<string, object>>> widthCounts = default;
            Optional<int> lineageDepth = default;
            Optional<int> lineageWidth = default;
            Optional<bool> includeParent = default;
            Optional<int> childrenCount = default;
            Optional<LineageDirection> lineageDirection = default;
            Optional<IList<ParentRelation>> parentRelations = default;
            Optional<IList<LineageRelation>> relations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("baseEntityGuid"))
                {
                    baseEntityGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("guidEntityMap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, AtlasEntityHeader> dictionary = new Dictionary<string, AtlasEntityHeader>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AtlasEntityHeader.DeserializeAtlasEntityHeader(property0.Value));
                    }
                    guidEntityMap = dictionary;
                    continue;
                }
                if (property.NameEquals("widthCounts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IDictionary<string, object>> dictionary = new Dictionary<string, IDictionary<string, object>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        Dictionary<string, object> dictionary0 = new Dictionary<string, object>();
                        foreach (var property1 in property0.Value.EnumerateObject())
                        {
                            dictionary0.Add(property1.Name, property1.Value.GetObject());
                        }
                        dictionary.Add(property0.Name, dictionary0);
                    }
                    widthCounts = dictionary;
                    continue;
                }
                if (property.NameEquals("lineageDepth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineageDepth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lineageWidth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineageWidth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("includeParent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    includeParent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("childrenCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    childrenCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lineageDirection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineageDirection = new LineageDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("parentRelations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ParentRelation> array = new List<ParentRelation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParentRelation.DeserializeParentRelation(item));
                    }
                    parentRelations = array;
                    continue;
                }
                if (property.NameEquals("relations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LineageRelation> array = new List<LineageRelation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LineageRelation.DeserializeLineageRelation(item));
                    }
                    relations = array;
                    continue;
                }
            }
            return new AtlasLineageInfo(baseEntityGuid.Value, Optional.ToDictionary(guidEntityMap), Optional.ToDictionary(widthCounts), Optional.ToNullable(lineageDepth), Optional.ToNullable(lineageWidth), Optional.ToNullable(includeParent), Optional.ToNullable(childrenCount), Optional.ToNullable(lineageDirection), Optional.ToList(parentRelations), Optional.ToList(relations));
        }

        internal partial class AtlasLineageInfoConverter : JsonConverter<AtlasLineageInfo>
        {
            public override void Write(Utf8JsonWriter writer, AtlasLineageInfo model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override AtlasLineageInfo Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeAtlasLineageInfo(document.RootElement);
            }
        }
    }
}
