// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewRelationships service client. </summary>
    public partial class PurviewRelationships
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PurviewRelationshipsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PurviewRelationships for mocking. </summary>
        protected PurviewRelationships()
        {
        }

        /// <summary> Initializes a new instance of PurviewRelationships. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewRelationships(Uri endpoint, TokenCredential credential, PurviewCatalogServiceRestAPIDocumentClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewCatalogServiceRestAPIDocumentClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://purview.azure.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new PurviewRelationshipsRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of PurviewRelationships. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="endpoint"/> is null. </exception>
        internal PurviewRelationships(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            RestClient = new PurviewRelationshipsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Create a new relationship between entities. </summary>
        /// <param name="relationship"> The AtlasRelationship object containing the information for the relationship to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasRelationship>> CreateAsync(AtlasRelationship relationship, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Create");
            scope.Start();
            try
            {
                return await RestClient.CreateAsync(relationship, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new relationship between entities. </summary>
        /// <param name="relationship"> The AtlasRelationship object containing the information for the relationship to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasRelationship> Create(AtlasRelationship relationship, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Create");
            scope.Start();
            try
            {
                return RestClient.Create(relationship, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing relationship between entities. </summary>
        /// <param name="relationship"> The AtlasRelationship object containing the information for the relationship to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasRelationship>> UpdateAsync(AtlasRelationship relationship, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Update");
            scope.Start();
            try
            {
                return await RestClient.UpdateAsync(relationship, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing relationship between entities. </summary>
        /// <param name="relationship"> The AtlasRelationship object containing the information for the relationship to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasRelationship> Update(AtlasRelationship relationship, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Update");
            scope.Start();
            try
            {
                return RestClient.Update(relationship, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get relationship information between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasRelationshipWithExtInfo>> GetAsync(string guid, bool? extendedInfo = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(guid, extendedInfo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get relationship information between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasRelationshipWithExtInfo> Get(string guid, bool? extendedInfo = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Get");
            scope.Start();
            try
            {
                return RestClient.Get(guid, extendedInfo, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a relationship between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(guid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a relationship between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewRelationships.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(guid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
