// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewEntities service client. </summary>
    public partial class PurviewEntities
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PurviewEntitiesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PurviewEntities for mocking. </summary>
        protected PurviewEntities()
        {
        }

        /// <summary> Initializes a new instance of PurviewEntities. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewEntities(Uri endpoint, TokenCredential credential, PurviewCatalogServiceRestAPIDocumentClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewCatalogServiceRestAPIDocumentClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://purview.azure.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new PurviewEntitiesRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of PurviewEntities. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="endpoint"/> is null. </exception>
        internal PurviewEntities(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            RestClient = new PurviewEntitiesRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="entity"> Atlas entity with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> CreateOrUpdateAsync(AtlasEntityWithExtInfo entity, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdate");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateAsync(entity, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="entity"> Atlas entity with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> CreateOrUpdate(AtlasEntityWithExtInfo entity, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdate");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdate(entity, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guids"> An array of GUIDs of entities to list. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasEntitiesWithExtInfo>> GetByGuidsAsync(IEnumerable<string> guids, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetByGuids");
            scope.Start();
            try
            {
                return await RestClient.GetByGuidsAsync(guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guids"> An array of GUIDs of entities to list. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasEntitiesWithExtInfo> GetByGuids(IEnumerable<string> guids, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetByGuids");
            scope.Start();
            try
            {
                return RestClient.GetByGuids(guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="entities"> An array of entities to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> CreateOrUpdateEntitiesAsync(AtlasEntitiesWithExtInfo entities, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdateEntities");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateEntitiesAsync(entities, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="entities"> An array of entities to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> CreateOrUpdateEntities(AtlasEntitiesWithExtInfo entities, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdateEntities");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateEntities(entities, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guids"> An array of GUIDs of entities to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> DeleteByGuidsAsync(IEnumerable<string> guids, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteByGuids");
            scope.Start();
            try
            {
                return await RestClient.DeleteByGuidsAsync(guids, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guids"> An array of GUIDs of entities to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> DeleteByGuids(IEnumerable<string> guids, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteByGuids");
            scope.Start();
            try
            {
                return RestClient.DeleteByGuids(guids, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="request"> The request to associate a classification to multiple entities. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationAsync(ClassificationAssociateRequest request, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddClassification");
            scope.Start();
            try
            {
                return await RestClient.AddClassificationAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="request"> The request to associate a classification to multiple entities. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassification(ClassificationAssociateRequest request, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddClassification");
            scope.Start();
            try
            {
                return RestClient.AddClassification(request, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasEntityWithExtInfo>> GetByGuidAsync(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetByGuid");
            scope.Start();
            try
            {
                return await RestClient.GetByGuidAsync(guid, minExtInfo, ignoreRelationships, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasEntityWithExtInfo> GetByGuid(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetByGuid");
            scope.Start();
            try
            {
                return RestClient.GetByGuid(guid, minExtInfo, ignoreRelationships, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="body"> The value of the attribute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> PartialUpdateEntityAttributeByGuidAsync(string guid, string name, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityAttributeByGuid");
            scope.Start();
            try
            {
                return await RestClient.PartialUpdateEntityAttributeByGuidAsync(guid, name, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="body"> The value of the attribute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> PartialUpdateEntityAttributeByGuid(string guid, string name, object body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityAttributeByGuid");
            scope.Start();
            try
            {
                return RestClient.PartialUpdateEntityAttributeByGuid(guid, name, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> DeleteByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteByGuid");
            scope.Start();
            try
            {
                return await RestClient.DeleteByGuidAsync(guid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> DeleteByGuid(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteByGuid");
            scope.Start();
            try
            {
                return RestClient.DeleteByGuid(guid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasClassification>> GetClassificationAsync(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetClassification");
            scope.Start();
            try
            {
                return await RestClient.GetClassificationAsync(guid, classificationName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasClassification> GetClassification(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetClassification");
            scope.Start();
            try
            {
                return RestClient.GetClassification(guid, classificationName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteClassificationAsync(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteClassification");
            scope.Start();
            try
            {
                return await RestClient.DeleteClassificationAsync(guid, classificationName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteClassification(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteClassification");
            scope.Start();
            try
            {
                return RestClient.DeleteClassification(guid, classificationName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasClassifications>> GetClassificationsAsync(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetClassifications");
            scope.Start();
            try
            {
                return await RestClient.GetClassificationsAsync(guid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasClassifications> GetClassifications(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetClassifications");
            scope.Start();
            try
            {
                return RestClient.GetClassifications(guid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classifications"> An array of classifications to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationsAsync(string guid, IEnumerable<AtlasClassification> classifications, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddClassifications");
            scope.Start();
            try
            {
                return await RestClient.AddClassificationsAsync(guid, classifications, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classifications"> An array of classifications to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassifications(string guid, IEnumerable<AtlasClassification> classifications, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddClassifications");
            scope.Start();
            try
            {
                return RestClient.AddClassifications(guid, classifications, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classifications"> An array of classifications to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateClassificationsAsync(string guid, IEnumerable<AtlasClassification> classifications, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.UpdateClassifications");
            scope.Start();
            try
            {
                return await RestClient.UpdateClassificationsAsync(guid, classifications, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classifications"> An array of classifications to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateClassifications(string guid, IEnumerable<AtlasClassification> classifications, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.UpdateClassifications");
            scope.Start();
            try
            {
                return RestClient.UpdateClassifications(guid, classifications, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasEntityWithExtInfo>> GetByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetByUniqueAttributes");
            scope.Start();
            try
            {
                return await RestClient.GetByUniqueAttributesAsync(typeName, minExtInfo, ignoreRelationships, attrQualifiedName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasEntityWithExtInfo> GetByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetByUniqueAttributes");
            scope.Start();
            try
            {
                return RestClient.GetByUniqueAttributes(typeName, minExtInfo, ignoreRelationships, attrQualifiedName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="atlasEntityWithExtInfo"> Atlas entity with extended information. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> PartialUpdateEntityByUniqueAttributesAsync(string typeName, AtlasEntityWithExtInfo atlasEntityWithExtInfo, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityByUniqueAttributes");
            scope.Start();
            try
            {
                return await RestClient.PartialUpdateEntityByUniqueAttributesAsync(typeName, atlasEntityWithExtInfo, attrQualifiedName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="atlasEntityWithExtInfo"> Atlas entity with extended information. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> PartialUpdateEntityByUniqueAttributes(string typeName, AtlasEntityWithExtInfo atlasEntityWithExtInfo, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityByUniqueAttributes");
            scope.Start();
            try
            {
                return RestClient.PartialUpdateEntityByUniqueAttributes(typeName, atlasEntityWithExtInfo, attrQualifiedName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> DeleteByUniqueAttributeAsync(string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.DeleteByUniqueAttributeAsync(typeName, attrQualifiedName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> DeleteByUniqueAttribute(string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.DeleteByUniqueAttribute(typeName, attrQualifiedName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteClassificationByUniqueAttributeAsync(string typeName, string classificationName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteClassificationByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.DeleteClassificationByUniqueAttributeAsync(typeName, classificationName, attrQualifiedName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteClassificationByUniqueAttribute(string typeName, string classificationName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteClassificationByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.DeleteClassificationByUniqueAttribute(typeName, classificationName, attrQualifiedName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="atlasClassificationArray"> An array of classification to be added. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationsByUniqueAttributeAsync(string typeName, IEnumerable<AtlasClassification> atlasClassificationArray, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.AddClassificationsByUniqueAttributeAsync(typeName, atlasClassificationArray, attrQualifiedName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="atlasClassificationArray"> An array of classification to be added. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassificationsByUniqueAttribute(string typeName, IEnumerable<AtlasClassification> atlasClassificationArray, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.AddClassificationsByUniqueAttribute(typeName, atlasClassificationArray, attrQualifiedName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="atlasClassificationArray"> An array of classification to be updated. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateClassificationsByUniqueAttributeAsync(string typeName, IEnumerable<AtlasClassification> atlasClassificationArray, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.UpdateClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.UpdateClassificationsByUniqueAttributeAsync(typeName, atlasClassificationArray, attrQualifiedName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="atlasClassificationArray"> An array of classification to be updated. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateClassificationsByUniqueAttribute(string typeName, IEnumerable<AtlasClassification> atlasClassificationArray, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.UpdateClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.UpdateClassificationsByUniqueAttribute(typeName, atlasClassificationArray, attrQualifiedName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="entityHeaders"> Atlas entity headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<string>>> SetClassificationsAsync(AtlasEntityHeaders entityHeaders, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.SetClassifications");
            scope.Start();
            try
            {
                return await RestClient.SetClassificationsAsync(entityHeaders, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="entityHeaders"> Atlas entity headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<string>> SetClassifications(AtlasEntityHeaders entityHeaders, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.SetClassifications");
            scope.Start();
            try
            {
                return RestClient.SetClassifications(entityHeaders, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasEntitiesWithExtInfo>> GetEntitiesByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetEntitiesByUniqueAttributes");
            scope.Start();
            try
            {
                return await RestClient.GetEntitiesByUniqueAttributesAsync(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasEntitiesWithExtInfo> GetEntitiesByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetEntitiesByUniqueAttributes");
            scope.Start();
            try
            {
                return RestClient.GetEntitiesByUniqueAttributes(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasEntityHeader>> GetHeaderAsync(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetHeader");
            scope.Start();
            try
            {
                return await RestClient.GetHeaderAsync(guid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasEntityHeader> GetHeader(string guid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetHeader");
            scope.Start();
            try
            {
                return RestClient.GetHeader(guid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove business metadata from an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> BusinessMetadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteBusinessMetadataAsync(string guid, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadata");
            scope.Start();
            try
            {
                return await RestClient.DeleteBusinessMetadataAsync(guid, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove business metadata from an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> BusinessMetadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteBusinessMetadata(string guid, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadata");
            scope.Start();
            try
            {
                return RestClient.DeleteBusinessMetadata(guid, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add business metadata to an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="isOverwrite"> Whether to overwrite the existing business metadata on the entity or not, default is false. </param>
        /// <param name="body"> Business Metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddOrUpdateBusinessMetadataAsync(string guid, bool? isOverwrite = null, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadata");
            scope.Start();
            try
            {
                return await RestClient.AddOrUpdateBusinessMetadataAsync(guid, isOverwrite, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add business metadata to an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="isOverwrite"> Whether to overwrite the existing business metadata on the entity or not, default is false. </param>
        /// <param name="body"> Business Metadata. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddOrUpdateBusinessMetadata(string guid, bool? isOverwrite = null, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadata");
            scope.Start();
            try
            {
                return RestClient.AddOrUpdateBusinessMetadata(guid, isOverwrite, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete business metadata attributes from an entity. </summary>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> BusinessMetadataAttributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteBusinessMetadataAttributesAsync(string bmName, string guid, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadataAttributes");
            scope.Start();
            try
            {
                return await RestClient.DeleteBusinessMetadataAttributesAsync(bmName, guid, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete business metadata attributes from an entity. </summary>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> BusinessMetadataAttributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteBusinessMetadataAttributes(string bmName, string guid, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadataAttributes");
            scope.Start();
            try
            {
                return RestClient.DeleteBusinessMetadataAttributes(bmName, guid, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add or update business metadata attributes. </summary>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> BusinessMetadataAttributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddOrUpdateBusinessMetadataAttributesAsync(string bmName, string guid, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadataAttributes");
            scope.Start();
            try
            {
                return await RestClient.AddOrUpdateBusinessMetadataAttributesAsync(bmName, guid, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add or update business metadata attributes. </summary>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> BusinessMetadataAttributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddOrUpdateBusinessMetadataAttributes(string bmName, string guid, IDictionary<string, object> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadataAttributes");
            scope.Start();
            try
            {
                return RestClient.AddOrUpdateBusinessMetadataAttributes(bmName, guid, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the sample Template for uploading/creating bulk BusinessMetaData. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Stream>> GetSampleBusinessMetadataTemplateAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetSampleBusinessMetadataTemplate");
            scope.Start();
            try
            {
                return await RestClient.GetSampleBusinessMetadataTemplateAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the sample Template for uploading/creating bulk BusinessMetaData. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Stream> GetSampleBusinessMetadataTemplate(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.GetSampleBusinessMetadataTemplate");
            scope.Start();
            try
            {
                return RestClient.GetSampleBusinessMetadataTemplate(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload the file for creating Business Metadata in BULK. </summary>
        /// <param name="uploadedInputStream"> InputStream of file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BulkImportResponse>> ImportBusinessMetadataAsync(Stream uploadedInputStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.ImportBusinessMetadata");
            scope.Start();
            try
            {
                return await RestClient.ImportBusinessMetadataAsync(uploadedInputStream, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload the file for creating Business Metadata in BULK. </summary>
        /// <param name="uploadedInputStream"> InputStream of file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BulkImportResponse> ImportBusinessMetadata(Stream uploadedInputStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.ImportBusinessMetadata");
            scope.Start();
            try
            {
                return RestClient.ImportBusinessMetadata(uploadedInputStream, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> delete given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> set of labels to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteLabelsAsync(string guid, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteLabels");
            scope.Start();
            try
            {
                return await RestClient.DeleteLabelsAsync(guid, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> delete given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> set of labels to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteLabels(string guid, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteLabels");
            scope.Start();
            try
            {
                return RestClient.DeleteLabels(guid, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> set of labels to be set to the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SetLabelsAsync(string guid, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.SetLabels");
            scope.Start();
            try
            {
                return await RestClient.SetLabelsAsync(guid, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> set of labels to be set to the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SetLabels(string guid, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.SetLabels");
            scope.Start();
            try
            {
                return RestClient.SetLabels(guid, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> add given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> set of labels to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddLabelAsync(string guid, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddLabel");
            scope.Start();
            try
            {
                return await RestClient.AddLabelAsync(guid, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> add given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="body"> set of labels to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddLabel(string guid, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddLabel");
            scope.Start();
            try
            {
                return RestClient.AddLabel(guid, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="body"> set of labels to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteLabelsByUniqueAttributeAsync(string typeName, string attrQualifiedName = null, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.DeleteLabelsByUniqueAttributeAsync(typeName, attrQualifiedName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="body"> set of labels to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteLabelsByUniqueAttribute(string typeName, string attrQualifiedName = null, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.DeleteLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.DeleteLabelsByUniqueAttribute(typeName, attrQualifiedName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="body"> set of labels to be set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SetLabelsByUniqueAttributeAsync(string typeName, string attrQualifiedName = null, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.SetLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.SetLabelsByUniqueAttributeAsync(typeName, attrQualifiedName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="body"> set of labels to be set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SetLabelsByUniqueAttribute(string typeName, string attrQualifiedName = null, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.SetLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.SetLabelsByUniqueAttribute(typeName, attrQualifiedName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="body"> set of labels to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddLabelsByUniqueAttributeAsync(string typeName, string attrQualifiedName = null, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.AddLabelsByUniqueAttributeAsync(typeName, attrQualifiedName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="body"> set of labels to be added. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddLabelsByUniqueAttribute(string typeName, string attrQualifiedName = null, IEnumerable<string> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewEntities.AddLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.AddLabelsByUniqueAttribute(typeName, attrQualifiedName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
