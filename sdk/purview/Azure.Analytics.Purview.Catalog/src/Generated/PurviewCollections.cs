// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewCollections service client. </summary>
    public partial class PurviewCollections
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PurviewCollectionsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PurviewCollections for mocking. </summary>
        protected PurviewCollections()
        {
        }

        /// <summary> Initializes a new instance of PurviewCollections. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewCollections(Uri endpoint, TokenCredential credential, PurviewCatalogServiceRestAPIDocumentClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewCatalogServiceRestAPIDocumentClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://purview.azure.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new PurviewCollectionsRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Initializes a new instance of PurviewCollections. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        internal PurviewCollections(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2022-03-01-preview")
        {
            RestClient = new PurviewCollectionsRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entity"> Atlas entity with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> CreateOrUpdateEntityAsync(string collection, AtlasEntityWithExtInfo entity, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntity");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateEntityAsync(collection, entity, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entity"> Atlas entity with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> CreateOrUpdateEntity(string collection, AtlasEntityWithExtInfo entity, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntity");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateEntity(collection, entity, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entities"> Atlas entities with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> CreateOrUpdateEntityInBulkAsync(string collection, AtlasEntitiesWithExtInfo entities, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntityInBulk");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateEntityInBulkAsync(collection, entities, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entities"> Atlas entities with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> CreateOrUpdateEntityInBulk(string collection, AtlasEntitiesWithExtInfo entities, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntityInBulk");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateEntityInBulk(collection, entities, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="moveEntitiesRequest"> Entity guids to be moved to target collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityMutationResponse>> MoveEntitiesToCollectionAsync(string collection, MoveEntitiesRequest moveEntitiesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                return await RestClient.MoveEntitiesToCollectionAsync(collection, moveEntitiesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="moveEntitiesRequest"> Entity guids to be moved to target collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityMutationResponse> MoveEntitiesToCollection(string collection, MoveEntitiesRequest moveEntitiesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                return RestClient.MoveEntitiesToCollection(collection, moveEntitiesRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
