// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewGlossaries service client. </summary>
    public partial class PurviewGlossaries
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PurviewGlossariesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PurviewGlossaries for mocking. </summary>
        protected PurviewGlossaries()
        {
        }

        /// <summary> Initializes a new instance of PurviewGlossaries. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewGlossaries(Uri endpoint, TokenCredential credential, PurviewCatalogServiceRestAPIDocumentClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewCatalogServiceRestAPIDocumentClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://purview.azure.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new PurviewGlossariesRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Initializes a new instance of PurviewGlossaries. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        internal PurviewGlossaries(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2022-03-01-preview")
        {
            RestClient = new PurviewGlossariesRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasGlossary>>> GetGlossariesAsync(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                return await RestClient.GetGlossariesAsync(limit, offset, sort, ignoreTermsAndCategories, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasGlossary>> GetGlossaries(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                return RestClient.GetGlossaries(limit, offset, sort, ignoreTermsAndCategories, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="atlasGlossary">
        /// Glossary definition, terms &amp; categories can be anchored to a glossary.
        /// Using the anchor attribute when creating the Term/Category.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossary>> CreateGlossaryAsync(AtlasGlossary atlasGlossary, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                return await RestClient.CreateGlossaryAsync(atlasGlossary, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="atlasGlossary">
        /// Glossary definition, terms &amp; categories can be anchored to a glossary.
        /// Using the anchor attribute when creating the Term/Category.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossary> CreateGlossary(AtlasGlossary atlasGlossary, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                return RestClient.CreateGlossary(atlasGlossary, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="glossaryCategory"> An array of glossary category definitions to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasGlossaryCategory>>> CreateGlossaryCategoriesAsync(IEnumerable<AtlasGlossaryCategory> glossaryCategory, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                return await RestClient.CreateGlossaryCategoriesAsync(glossaryCategory, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="glossaryCategory"> An array of glossary category definitions to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasGlossaryCategory>> CreateGlossaryCategories(IEnumerable<AtlasGlossaryCategory> glossaryCategory, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                return RestClient.CreateGlossaryCategories(glossaryCategory, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="glossaryCategory">
        /// The glossary category definition. A category must be anchored to a Glossary when creating.
        /// Optionally, terms belonging to the category and the hierarchy can also be defined during creation.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryCategory>> CreateGlossaryCategoryAsync(AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                return await RestClient.CreateGlossaryCategoryAsync(glossaryCategory, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="glossaryCategory">
        /// The glossary category definition. A category must be anchored to a Glossary when creating.
        /// Optionally, terms belonging to the category and the hierarchy can also be defined during creation.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryCategory> CreateGlossaryCategory(AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                return RestClient.CreateGlossaryCategory(glossaryCategory, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryCategory>> GetGlossaryCategoryAsync(string categoryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                return await RestClient.GetGlossaryCategoryAsync(categoryGuid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryCategory> GetGlossaryCategory(string categoryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                return RestClient.GetGlossaryCategory(categoryGuid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="glossaryCategory"> The glossary category to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryCategory>> UpdateGlossaryCategoryAsync(string categoryGuid, AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                return await RestClient.UpdateGlossaryCategoryAsync(categoryGuid, glossaryCategory, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="glossaryCategory"> The glossary category to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryCategory> UpdateGlossaryCategory(string categoryGuid, AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                return RestClient.UpdateGlossaryCategory(categoryGuid, glossaryCategory, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGlossaryCategoryAsync(string categoryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                return await RestClient.DeleteGlossaryCategoryAsync(categoryGuid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGlossaryCategory(string categoryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                return RestClient.DeleteGlossaryCategory(categoryGuid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values for partial update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryCategory>> PartialUpdateGlossaryCategoryAsync(string categoryGuid, IDictionary<string, string> partialUpdates, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                return await RestClient.PartialUpdateGlossaryCategoryAsync(categoryGuid, partialUpdates, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values for partial update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryCategory> PartialUpdateGlossaryCategory(string categoryGuid, IDictionary<string, string> partialUpdates, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                return RestClient.PartialUpdateGlossaryCategory(categoryGuid, partialUpdates, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>>> GetRelatedCategoriesAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                return await RestClient.GetRelatedCategoriesAsync(categoryGuid, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> GetRelatedCategories(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                return RestClient.GetRelatedCategories(categoryGuid, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasRelatedTermHeader>>> GetCategoryTermsAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                return await RestClient.GetCategoryTermsAsync(categoryGuid, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasRelatedTermHeader>> GetCategoryTerms(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                return RestClient.GetCategoryTerms(categoryGuid, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="glossaryTerm">
        /// The glossary term definition. A term must be anchored to a Glossary at the time of creation.
        /// Optionally it can be categorized as well.
        /// </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryTerm>> CreateGlossaryTermAsync(AtlasGlossaryTerm glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                return await RestClient.CreateGlossaryTermAsync(glossaryTerm, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="glossaryTerm">
        /// The glossary term definition. A term must be anchored to a Glossary at the time of creation.
        /// Optionally it can be categorized as well.
        /// </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryTerm> CreateGlossaryTerm(AtlasGlossaryTerm glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                return RestClient.CreateGlossaryTerm(glossaryTerm, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryTerm>> GetGlossaryTermAsync(string termGuid, bool? includeTermHierarchy = null, IEnumerable<string> excludeRelationshipTypeList = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                return await RestClient.GetGlossaryTermAsync(termGuid, includeTermHierarchy, excludeRelationshipTypeList, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryTerm> GetGlossaryTerm(string termGuid, bool? includeTermHierarchy = null, IEnumerable<string> excludeRelationshipTypeList = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                return RestClient.GetGlossaryTerm(termGuid, includeTermHierarchy, excludeRelationshipTypeList, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="glossaryTerm"> The glossary term to be updated. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryTerm>> UpdateGlossaryTermAsync(string termGuid, AtlasGlossaryTerm glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                return await RestClient.UpdateGlossaryTermAsync(termGuid, glossaryTerm, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="glossaryTerm"> The glossary term to be updated. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryTerm> UpdateGlossaryTerm(string termGuid, AtlasGlossaryTerm glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                return RestClient.UpdateGlossaryTerm(termGuid, glossaryTerm, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGlossaryTermAsync(string termGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                return await RestClient.DeleteGlossaryTermAsync(termGuid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGlossaryTerm(string termGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                return RestClient.DeleteGlossaryTerm(termGuid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values to be updated. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryTerm>> PartialUpdateGlossaryTermAsync(string termGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                return await RestClient.PartialUpdateGlossaryTermAsync(termGuid, partialUpdates, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values to be updated. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryTerm> PartialUpdateGlossaryTerm(string termGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                return RestClient.PartialUpdateGlossaryTerm(termGuid, partialUpdates, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="glossaryTerm"> An array of glossary term definitions to be created in bulk. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasGlossaryTerm>>> CreateGlossaryTermsAsync(IEnumerable<AtlasGlossaryTerm> glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                return await RestClient.CreateGlossaryTermsAsync(glossaryTerm, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="glossaryTerm"> An array of glossary term definitions to be created in bulk. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasGlossaryTerm>> CreateGlossaryTerms(IEnumerable<AtlasGlossaryTerm> glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                return RestClient.CreateGlossaryTerms(glossaryTerm, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasRelatedObjectId>>> GetEntitiesAssignedWithTermAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                return await RestClient.GetEntitiesAssignedWithTermAsync(termGuid, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasRelatedObjectId>> GetEntitiesAssignedWithTerm(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                return RestClient.GetEntitiesAssignedWithTerm(termGuid, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs to which the term has to be associated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AssignTermToEntitiesAsync(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                return await RestClient.AssignTermToEntitiesAsync(termGuid, relatedObjectIds, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs to which the term has to be associated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AssignTermToEntities(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                return RestClient.AssignTermToEntities(termGuid, relatedObjectIds, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveTermAssignmentFromEntitiesAsync(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                return await RestClient.RemoveTermAssignmentFromEntitiesAsync(termGuid, relatedObjectIds, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveTermAssignmentFromEntities(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                return RestClient.RemoveTermAssignmentFromEntities(termGuid, relatedObjectIds, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteTermAssignmentFromEntitiesAsync(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                return await RestClient.DeleteTermAssignmentFromEntitiesAsync(termGuid, relatedObjectIds, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteTermAssignmentFromEntities(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                return RestClient.DeleteTermAssignmentFromEntities(termGuid, relatedObjectIds, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>>> GetRelatedTermsAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                return await RestClient.GetRelatedTermsAsync(termGuid, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> GetRelatedTerms(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                return RestClient.GetRelatedTerms(termGuid, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossary>> GetGlossaryAsync(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                return await RestClient.GetGlossaryAsync(glossaryGuid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossary> GetGlossary(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                return RestClient.GetGlossary(glossaryGuid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="updatedGlossary"> The glossary definition to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossary>> UpdateGlossaryAsync(string glossaryGuid, AtlasGlossary updatedGlossary, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                return await RestClient.UpdateGlossaryAsync(glossaryGuid, updatedGlossary, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="updatedGlossary"> The glossary definition to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossary> UpdateGlossary(string glossaryGuid, AtlasGlossary updatedGlossary, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                return RestClient.UpdateGlossary(glossaryGuid, updatedGlossary, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGlossaryAsync(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                return await RestClient.DeleteGlossaryAsync(glossaryGuid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGlossary(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                return RestClient.DeleteGlossary(glossaryGuid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasGlossaryCategory>>> GetGlossaryCategoriesAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                return await RestClient.GetGlossaryCategoriesAsync(glossaryGuid, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasGlossaryCategory>> GetGlossaryCategories(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                return RestClient.GetGlossaryCategories(glossaryGuid, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasRelatedCategoryHeader>>> GetGlossaryCategoriesHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                return await RestClient.GetGlossaryCategoriesHeadersAsync(glossaryGuid, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasRelatedCategoryHeader>> GetGlossaryCategoriesHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                return RestClient.GetGlossaryCategoriesHeaders(glossaryGuid, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossaryExtInfo>> GetDetailedGlossaryAsync(string glossaryGuid, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                return await RestClient.GetDetailedGlossaryAsync(glossaryGuid, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossaryExtInfo> GetDetailedGlossary(string glossaryGuid, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                return RestClient.GetDetailedGlossary(glossaryGuid, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasGlossary>> PartialUpdateGlossaryAsync(string glossaryGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                return await RestClient.PartialUpdateGlossaryAsync(glossaryGuid, partialUpdates, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasGlossary> PartialUpdateGlossary(string glossaryGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                return RestClient.PartialUpdateGlossary(glossaryGuid, partialUpdates, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasGlossaryTerm>>> GetGlossaryTermsAsync(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                return await RestClient.GetGlossaryTermsAsync(glossaryGuid, includeTermHierarchy, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasGlossaryTerm>> GetGlossaryTerms(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                return RestClient.GetGlossaryTerms(glossaryGuid, includeTermHierarchy, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasRelatedTermHeader>>> GetGlossaryTermHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                return await RestClient.GetGlossaryTermHeadersAsync(glossaryGuid, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasRelatedTermHeader>> GetGlossaryTermHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                return RestClient.GetGlossaryTermHeaders(glossaryGuid, limit, offset, sort, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImportCSVOperation>> GetImportCsvOperationStatusAsync(string operationGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                return await RestClient.GetImportCsvOperationStatusAsync(operationGuid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImportCSVOperation> GetImportCsvOperationStatus(string operationGuid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                return RestClient.GetImportCsvOperationStatus(operationGuid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="termGuids"> An array of term guids. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<string>> ExportGlossaryTermsAsCsvAsync(string glossaryGuid, IEnumerable<string> termGuids, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                return await RestClient.ExportGlossaryTermsAsCsvAsync(glossaryGuid, termGuids, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="termGuids"> An array of term guids. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<string> ExportGlossaryTermsAsCsv(string glossaryGuid, IEnumerable<string> termGuids, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                return RestClient.ExportGlossaryTermsAsCsv(glossaryGuid, termGuids, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AtlasGlossaryTerm>>> GetTermsByGlossaryNameAsync(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                return await RestClient.GetTermsByGlossaryNameAsync(glossaryName, limit, offset, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AtlasGlossaryTerm>> GetTermsByGlossaryName(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                return RestClient.GetTermsByGlossaryName(glossaryName, limit, offset, includeTermHierarchy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="file"/> is null. </exception>
        public virtual async Task<PurviewGlossariesImportGlossaryTermsViaCsvOperation> StartImportGlossaryTermsViaCsvAsync(string glossaryGuid, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.StartImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ImportGlossaryTermsViaCsvAsync(glossaryGuid, file, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
                return new PurviewGlossariesImportGlossaryTermsViaCsvOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, file, includeTermHierarchy).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="file"/> is null. </exception>
        public virtual PurviewGlossariesImportGlossaryTermsViaCsvOperation StartImportGlossaryTermsViaCsv(string glossaryGuid, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.StartImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ImportGlossaryTermsViaCsv(glossaryGuid, file, includeTermHierarchy, cancellationToken);
                return new PurviewGlossariesImportGlossaryTermsViaCsvOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, file, includeTermHierarchy).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="file"/> is null. </exception>
        public virtual async Task<PurviewGlossariesImportGlossaryTermsViaCsvByGlossaryNameOperation> StartImportGlossaryTermsViaCsvByGlossaryNameAsync(string glossaryName, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryName == null)
            {
                throw new ArgumentNullException(nameof(glossaryName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.StartImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ImportGlossaryTermsViaCsvByGlossaryNameAsync(glossaryName, file, includeTermHierarchy, cancellationToken).ConfigureAwait(false);
                return new PurviewGlossariesImportGlossaryTermsViaCsvByGlossaryNameOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, file, includeTermHierarchy).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="file"/> is null. </exception>
        public virtual PurviewGlossariesImportGlossaryTermsViaCsvByGlossaryNameOperation StartImportGlossaryTermsViaCsvByGlossaryName(string glossaryName, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryName == null)
            {
                throw new ArgumentNullException(nameof(glossaryName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.StartImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ImportGlossaryTermsViaCsvByGlossaryName(glossaryName, file, includeTermHierarchy, cancellationToken);
                return new PurviewGlossariesImportGlossaryTermsViaCsvByGlossaryNameOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, file, includeTermHierarchy).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
