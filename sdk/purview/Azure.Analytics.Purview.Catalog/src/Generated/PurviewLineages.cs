// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewLineages service client. </summary>
    public partial class PurviewLineages
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PurviewLineagesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PurviewLineages for mocking. </summary>
        protected PurviewLineages()
        {
        }

        /// <summary> Initializes a new instance of PurviewLineages. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewLineages(Uri endpoint, TokenCredential credential, PurviewCatalogServiceRestAPIDocumentClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewCatalogServiceRestAPIDocumentClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://purview.azure.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new PurviewLineagesRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Initializes a new instance of PurviewLineages. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        internal PurviewLineages(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2022-03-01-preview")
        {
            RestClient = new PurviewLineagesRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get lineage info of the entity specified by GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasLineageInfo>> GetLineageGraphAsync(string guid, Direction direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewLineages.GetLineageGraph");
            scope.Start();
            try
            {
                return await RestClient.GetLineageGraphAsync(guid, direction, depth, width, includeParent, getDerivedLineage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get lineage info of the entity specified by GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasLineageInfo> GetLineageGraph(string guid, Direction direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewLineages.GetLineageGraph");
            scope.Start();
            try
            {
                return RestClient.GetLineageGraph(guid, direction, depth, width, includeParent, getDerivedLineage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return immediate next page lineage info about entity with pagination. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasLineageInfo>> NextPageLineageAsync(string guid, Direction direction, bool? getDerivedLineage = null, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewLineages.NextPageLineage");
            scope.Start();
            try
            {
                return await RestClient.NextPageLineageAsync(guid, direction, getDerivedLineage, offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return immediate next page lineage info about entity with pagination. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasLineageInfo> NextPageLineage(string guid, Direction direction, bool? getDerivedLineage = null, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewLineages.NextPageLineage");
            scope.Start();
            try
            {
                return RestClient.NextPageLineage(guid, direction, getDerivedLineage, offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns lineage info about entity.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// attr:[attrName]=[attrValue]
        /// 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AtlasLineageInfo>> GetLineageByUniqueAttributeAsync(string typeName, Direction direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewLineages.GetLineageByUniqueAttribute");
            scope.Start();
            try
            {
                return await RestClient.GetLineageByUniqueAttributeAsync(typeName, direction, depth, width, includeParent, getDerivedLineage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns lineage info about entity.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// attr:[attrName]=[attrValue]
        /// 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AtlasLineageInfo> GetLineageByUniqueAttribute(string typeName, Direction direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewLineages.GetLineageByUniqueAttribute");
            scope.Start();
            try
            {
                return RestClient.GetLineageByUniqueAttribute(typeName, direction, depth, width, includeParent, getDerivedLineage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
